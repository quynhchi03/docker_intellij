[
{
	"uri": "//localhost:1313/vi/2-installjenkins/2.2-c%C3%A0i-%C4%91%E1%BA%B7t-intellij/",
	"title": "Cách cài đặt INTELLIJ",
	"tags": [],
	"description": "",
	"content": "Các options của IntelliJ IntelliJ Community – Đây là options miễn phí IntelliJ Ultimate – Đây là options mất phí (trong bài này mình sẽ hướng dẫn làm sao để dùng options này miễn phí – version mình hướng dẫn trong bài này là IntelliJ Ultimate 2021.1 – các bạn nhớ chọn đúng version này) 1.Download Cách 1: các bạn vào trang chủ của Intellij để download IntelliJ Ultimate 2021.1. Nếu không thấy version này thì chọn vào mục Other versions. Kéo xuống Version 2021.1 =\u0026gt; Click vào 2021.1.3 – Windows (exe) – đối với Windows để download (các OS khác thì làm tương tự) Cách 2: Vào link Googe Drive. 2. Hướng dẫn cài đặt Chạy file cài đặt các bạn vừa download về. Chọn Run để chạy\nChọn Next Ở phần Destination Folder chọn đường dẫn để lưu các file cài đặt (nên để mặc định) ==\u0026gt; Chọn Next Chọn các options khi cài đặt Update PATH variable (restart needed) Update context menu: Thêm IntelliJ vào context menu (chọn mở IntelliJ khi click chuột phải) Create Associations: Mở các file có định dạng này bằng IntelliJ Download and install 32-bit JetBrains Runtime: cài đặt máy ảo JVM cho 32-bit. Chọn Install để cài đặt Chờ đợi cho đến khi quá trình cài đặt hoàn tất. Hệ thống sẽ yêu cần khởi động lại máy khi cài đặt xong. Ở đây, mình chọn khởi động lại luôn. Vậy là quá trình cài đặt đã hoàn tất "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "Nội Dung Lý Thuyết về Docker Docker compose "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.2-docker-compose/",
	"title": "Docker compose",
	"tags": [],
	"description": "",
	"content": "Docker compose Docker compose là công cụ dùng để định nghĩa và run multi-container cho Docker application. Với compose bạn sử dụng file YAML để config các services cho application của bạn. Sau đó dùng command để create và run từ những config đó. Sử dụng cũng khá đơn giản chỉ với ba bước: Khai báo app’s environment trong Dockerfile. Khai báo các services cần thiết để chạy application trong file docker-compose.yml. Run docker-compose up để start và run app. Docker Compose là một công cụ giúp quản lý các container Docker trong một ứng dụng. Với Docker Compose, bạn có thể dễ dàng quản lý các container của ứng dụng mà không cần phải khởi động một container một cách thủ công. =\u0026gt; Hiểu đơn giản: Docker compose là công cụ giúp chạy 1 lúc nhiều container\nKhông giống như Dockerfile (build các image). Docker compose dùng để build và run các container. Các thao tác của docker-compose tương tự như lệnh: docker run.\nDocker compose cho phép tạo nhiều service(container) giống nhau bằng lệnh: $ docker-compose scale \u0026lt;tên service\u0026gt; = \u0026lt;số lượng\u0026gt;\nCác tính năng của Docker Compose Docker Compose cung cấp nhiều tính năng hữu ích để giúp bạn quản lý các ứng dụng của mình. Dưới đây là một số tính năng quan trọng của Docker Compose: Định nghĩa dịch vụ: Bạn có thể định nghĩa các dịch vụ khác nhau và cấu hình chúng bằng cách sử dụng Docker Compose. Ví dụ: bạn có thể định nghĩa một dịch vụ database và một dịch vụ web để triển khai ứng dụng của mình. Tự động tạo container: Docker Compose sẽ tự động tạo các container cần thiết để triển khai ứng dụng của bạn. Nó sẽ tạo các container dựa trên cấu hình mà bạn đã định nghĩa. Quản lý mạng: Docker Compose cung cấp các công cụ để quản lý mạng cho các container. Bạn có thể định nghĩa các mạng riêng để giữ cho các container của bạn an toàn và đảm bảo chúng không bị tấn công từ bên ngoài. Quản lý lưu trữ: Bạn có thể định nghĩa các khối lượng lưu trữ để sử dụng cho các container. Docker Compose sẽ giúp bạn quản lý các khối lượng lưu trữ này và đảm bảo chúng được lưu trữ và quản lý một cách an toàn và hiệu quả. Tích hợp với Docker Swarm: Docker Compose có thể tích hợp với Docker Swarm để triển khai ứng dụng của bạn trên một cụm máy chủ Docker. Điều này giúp bạn quản lý và mở rộng các ứng dụng của mình một cách dễ dàng. Khả năng mở rộng: Docker Compose cho phép bạn mở rộng ứng dụng của mình bằng cách thêm các dịch vụ mới hoặc tăng số lượng container cho các dịch vụ hiện có. Điều này giúp bạn quản lý tốt hơn sự tăng trưởng của ứng dụng của mình. Những lưu ý quan trọng khi sử dụng Docker Compose Đặt tên cho các container: Để dễ dàng quản lý các container, bạn nên đặt tên cho chúng. Điều này sẽ giúp bạn xác định được container nào đang chạy trong ứng dụng của bạn. Sử dụng mạng riêng: Khi sử dụng Docker Compose, bạn nên sử dụng một mạng riêng để giữ cho các container của bạn an toàn và được cô lập khỏi mạng bên ngoài. Sử dụng các biến môi trường: Sử dụng các biến môi trường trong tệp YAML của bạn để tránh lưu trữ các thông tin nhạy cảm trong tệp YAML. Các biến môi trường có thể được đặt trong một tệp .env riêng biệt. Để tránh xung đột khi khởi động container, bạn nên đặt các cổng cho container của mình trong tệp YAML. Bạn nên sử dụng cổng được khuyến nghị của Docker. Các lệnh Docker Compose có thể được thực thi thông qua một Makefile. Điều này giúp cho việc sử dụng Docker Compose trở nên đơn giản và hiệu quả hơn. Các bước sử dụng Docker Compose Bước 1: Tạo tệp YAML: Tạo một tệp YAML để định nghĩa các container Bước 2: Khởi động các container: Sau khi chúng ta đã định nghĩa các container trong tệp YAML, chúng ta có thể sử dụng lệnh docker-compose up để khởi động các container của chúng ta. Docker Compose sẽ tự động tải xuống các hình ảnh và khởi động các container cho chúng ta. Bước 3: Kiểm tra trạng thái của các container:Sau khi chúng ta đã khởi động các container, chúng ta có thể sử dụng lệnh docker-compose ps để kiểm tra trạng thái của các container. Bước 4: Dừng các container:Khi chúng ta đã hoàn thành việc sử dụng các container, chúng ta có thể sử dụng lệnh docker-compose down để dừng các container. Câu hỏi thường gặp Docker Compose hoạt động như thế nào? Docker Compose hoạt động bằng cách định nghĩa các dịch vụ trong file docker-compose.yml. Sau đó, Docker Compose sẽ sử dụng các thông tin này để khởi tạo và quản lý các container tương ứng. Docker Compose có thể được sử dụng để triển khai các ứng dụng lớn không? Docker Compose có thể được sử dụng để triển khai các ứng dụng lớn, nhưng nó không phải là giải pháp tối ưu cho các ứng dụng lớn và phức tạp. Đối với các ứng dụng lớn và phức tạp hơn, bạn có thể muốn sử dụng các công cụ khác như Kubernetes hoặc Docker Swarm để quản lý các container của bạn. Docker Compose có hỗ trợ đa môi trường không? Docker Compose có thể hỗ trợ đa môi trường bằng cách sử dụng các tệp docker-compose.yml khác nhau cho mỗi môi trường. Bằng cách định nghĩa các biến môi trường trong tệp docker-compose.yml và sử dụng các biến này để định nghĩa các cài đặt khác nhau cho mỗi môi trường, bạn có thể triển khai các ứng dụng Docker của mình trên nhiều môi trường khác nhau một cách dễ dàng. "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Học JaVa",
	"tags": [],
	"description": "",
	"content": "Triển khai CI/CD sử dụng Jenkins và Argo CD Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành việc thiết lập Jenkins và Argo CD để tự động hóa các giai đoạn xây dựng và kiểm thử của ứng dụng, đồng thời sử dụng Argo CD để tự động triển khai ứng dụng đến môi trường mong muốn, cải thiện tốc độ và độ tin cậy của quá trình giao hàng phần mềm, đồng thời đảm bảo tất cả các thay đổi được theo dõi và kiểm toán trong Git.\nNội dung Giới thiệu CI/CD, Jenkins và Argo CD Cài đặt Jenkins Cài đặt và triển khai Argo CD Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-installjenkins/2.1-gi%E1%BB%9Bi-thi%E1%BB%87u/",
	"title": "Intellij là gì?",
	"tags": [],
	"description": "",
	"content": "Intellij là gì? IntelliJ IDEA là một môi trường phát triển tích hợp (IDE) mạnh mẽ được thiết kế đặc biệt cho lập trình Java, và cũng có khả năng hỗ trợ một số ngôn ngữ khác như Node.js, Python hay nhiều ngôn ngữ khác. Phiên bản đầu tiên của IntelliJ IDEA được phát hành vào tháng 1/2001, từ đó đến nãy nó đã trở thành một trong những IDE hàng đầu trong cộng đồng phát triển phần mềm.\nLợi ích khi sử dụng Intellij IDEA\nViệc sử dụng IntelliJ IDEA mang lại nhiều lợi ích đáng kể cho các nhà phát triển: Tập trung quản lý tác vụ: IntelliJ IDEA cung cấp một môi trường tích hợp để các nhà phát triển có thể tập trung vào phát triển, quản lý tất cả các tác vụ hàng ngày của họ một cách hiệu quả. Phát triển và gỡ lỗi mã một cách linh hoạt: Nhờ vào các công cụ mạnh mẽ của IntelliJ IDEA, nhà phát triển có thể viết, gỡ lỗi, tái cấu trúc, kiểm tra và tìm hiểu mã của bạn một cách linh hoạt mà không bị ảnh hưởng. Hỗ trợ nhiều ngôn ngữ và công nghệ: IntelliJ IDEA xử lý một cơ sở mã hỗn hợp của nhiều ngôn ngữ lập trình như Java, Ruby, Groovy, Python và Scala, đồng thời hỗ trợ nhiều framework và công nghệ khác nhau. Duy trì chất lượng mã tự động: Công cụ tự động của IntelliJ IDEA giúp duy trì chất lượng mã thông qua việc theo dõi và sửa lỗi trên tất cả các cấp độ, từ câu lệnh đến kiến trúc tổng thể. Tạo mã sạch và nhanh chóng: IntelliJ IDEA được thiết kế để tạo ra mã sạch và có thể thực hiện mã trong thời gian ngắn nhất, giúp tăng hiệu suất làm việc của nhà phát triển. Đa quy mô: IntelliJ IDEA không chỉ phù hợp cho các nhà phát triển cá nhân mà còn đối với các doanh nghiệp với mọi quy mô, từ nhỏ đến lớn. Hỗ trợ hệ thống điều khiển phiên bản và CI/CD: IntelliJ IDEA tích hợp tốt với các hệ thống điều khiển phiên bản phổ biến và server tích hợp liên tục như TeamCity, giúp tạo ra một quy trình phát triển phần mềm mạnh mẽ và linh hoạt. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.1-gi%E1%BB%9Bi-thi%E1%BB%87u/",
	"title": "Lý Thuyết về Docker",
	"tags": [],
	"description": "",
	"content": "Nội Dung Docker là gì? Tại sao nên sử dụng Docker Lợi ích của Docker Một số khái niệm Dockerfile là gì? Docker compose So sánh image và container 1. Docker là gì? Docker là một nền tảng cho developers và system admin để develop, deploy và run application với container. Nó cho phép tạo các môi trường độc lập và tách biệt để khởi chạy và phát triển ứng dụng và môi trường này được gọi là container. Khi cần deploy lên bất kỳ server nào chỉ cần run container của Docker thì application của bạn sẽ được khởi chạy ngay lập tức. Xây dựng một lần, chạy mọi nơi Hoặc nói một cách đơn giản: Khi chúng ta muốn chạy ứng dụng, chúng ta phải thiết lập một môi trường chạy cho nó. Thay vì cài đặt một môi trường chạy cho nó, chúng ta sẽ chạy docker. 2.Tại sao nên sử dụng Docker Như bạn đã từng triển khai một phần mềm, việc cài đặt môi trường khá là vất vả, và rất vất vả nếu như có xung đột trong hệ thống. Ví dụ như làm khi làm Machine Learning, ta cần phiên bản python phù hợp với các thư viện của tensorflow, numpy\u0026hellip; môi trường ở trên máy công ty, khác với môi trường trên máy cá nhân của bạn, và như vậy để làm việc tại nhà trên dự án công ty, bạn phải build lại môi trường. Và cứ như thế, rất mất nhiều thời gian và công sức. Với Docker, các cấu hình được phân biệt với quản lý tài nguyên và việc triển khai là không đáng kể. Chỉ cần đơn giản chạy lệnh docker run là tất cả mọi thứ đã sẵn sàng cho chúng ta trải nghiệm. 3.Lợi ích của Docker Không như máy ảo Docker start và stop chỉ trong vài giây. Bạn có thể khởi chạy container trên mỗi hệ thống mà bạn muốn. Container có thể build và loại bỏ nhanh hơn máy ảo. Dễ dàng thiết lập môi trường làm việc. Chỉ cần config 1 lần duy nhất và không bao giờ phải cài đặt lại các dependencies. Nếu bạn thay đổi máy hoặc có người mới tham gia vào project thì bạn chỉ cần lấy config đó và đưa cho họ. Nó giữ cho word-space của bạn sạch sẽ hơn khi bạn xóa môi trường mà ảnh hưởng đến các phần khác. 4.Một số khái niệm Docker Client: là cách mà bạn tương tác với docker thông qua command trong terminal. Docker Client sẽ sử dụng API gửi lệnh tới Docker Daemon.\nDocker Daemon: là server Docker cho yêu cầu từ Docker API. Nó quản lý images, containers, networks và volume.\nDocker Volumes: là cách tốt nhất để lưu trữ dữ liệu liên tục cho việc sử dụng và tạo apps.\nDocker Registry: là nơi lưu trữ riêng của Docker Images. Images được push vào registry và client sẽ pull images từ registry. Có thể sử dụng registry của riêng bạn hoặc registry của nhà cung cấp như : AWS, Google Cloud, Microsoft Azure.\nDocker Hub: là Registry lớn nhất của Docker Images ( mặc định). Có thể tìm thấy images và lưu trữ images của riêng bạn trên Docker Hub ( miễn phí).\nDocker Repository: là tập hợp các Docker Images cùng tên nhưng khác tags. VD: golang:1.11-alpine.\nDocker Networking: cho phép kết nối các container lại với nhau. Kết nối này có thể trên 1 host hoặc nhiều host.\nDocker Compose: là công cụ cho phép run app với nhiều Docker containers 1 cách dễ dàng hơn. Docker Compose cho phép bạn config các command trong file docker-compose.yml để sử dụng lại. Có sẵn khi cài Docker.\nDocker Swarm: để phối hợp triển khai container.\nDocker Services: là các containers trong production. 1 service chỉ run 1 image nhưng nó mã hoá cách thức để run image — sử dụng port nào, bao nhiêu bản sao container run để service có hiệu năng cần thiết và ngay lập tức.\n5.Dockerfile là gì? Dockerfile là tệp cấu hình để Docker xây dựng hình ảnh. Nó sử dụng một hình ảnh cơ sở để xây dựng lớp hình ảnh ban đầu. Một số hình ảnh cơ bản: python, unbutu và alpine. Sau đó, nếu có các lớp bổ sung, nó sẽ được xếp chồng lên trên lớp cơ sở. Cuối cùng, một lớp mỏng có thể được xếp chồng lên trên các lớp trước đó khác.\nCác config:\nFROM — chỉ định image gốc: python, unbutu, alpine…\nLABEL — cung cấp metadata cho image. Có thể sử dụng để add thông tin maintainer. Để xem các label của images, dùng lệnh docker inspect.\nENV — thiết lập một biến môi trường.\nRUN — Có thể tạo một lệnh khi build image. Được sử dụng để cài đặt các package vào container.\nCOPY — Sao chép các file và thư mục vào container.\nADD — Sao chép các file và thư mục vào container.\nCMD — Cung cấp một lệnh và đối số cho container thực thi. Các tham số có thể được ghi đè và chỉ có một CMD.\nWORKDIR — Thiết lập thư mục đang làm việc cho các chỉ thị khác như: RUN, CMD, ENTRYPOINT, COPY, ADD,…\nARG — Định nghĩa giá trị biến được dùng trong lúc build image.\nENTRYPOINT — cung cấp lệnh và đối số cho một container thực thi.\nEXPOSE — khai báo port lắng nghe của image.\nVOLUME — tạo một điểm gắn thư mục để truy cập và lưu trữ data.\n6.So sánh image và container "
},
{
	"uri": "//localhost:1313/vi/2-installjenkins/2.3-t%E1%BA%A1o-project-b%E1%BA%B1ng-intellij/",
	"title": "Tạo project INTELLIJ",
	"tags": [],
	"description": "",
	"content": "Các bước: Tạo project Java trên Intellj IDEA\nMở Intellij IDEA và chọn **Create New Project Chọn các mục theo ảnh Ở phần bên trái, chọn loại project (Java, Spring… Với các ngôn ngữ khác như Node.js, Python thì bạn cài cài plugin nó mới hiện ra) Ở phần bên phải trọn thư viện hoặc framework sử dụng (Trong ví dụ này mình viết chương trình Hello World nên không cần thư viện hay framework gì cả) Trong mục Project SDK thì các bạn trỏ tới folder cài đặt Java hoặc sử dụng SDK có sẵn của Intellij đều được. Nhập tên Project Kết quả: Project HelloWorld được tạo ra với cấu trúc như sau: Tiếp theo, tạo file java cho project. Click chuột phải vào folder src và chọn New/Java Class Nhập tên class. (nếu sử dụng dấu chấm thì nó sẽ hiểu phần trước đó là package)\nVí dụ stackjava.com.helloworld.Hello thì nó sẽ tạo package stackjava.com.helloworld trong folder src và tạo file Hello.java trong package đó.\nKết quả : Tiếp theo viết chương trình in ra dòng chữ Hello World! vào filde Hello.java Chạy file Hello.java (click chuột phải vào file Hello và chọn Run \u0026lsquo;Hello.main()\u0026rsquo;) Kết quả: Okay, Done! "
},
{
	"uri": "//localhost:1313/vi/2-installjenkins/",
	"title": "Intellij ",
	"tags": [],
	"description": "",
	"content": "Nội dung INTELLIJ là gì? CÁCH CÀI ĐẶT INTELLIJ TẠO PROJECT BẰNG INTELLIJ "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]